# -*- coding: utf-8 -*-
"""people_detection_program.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1gFg6g3OWupRlPKvFyTegbVHYmATWkfyT
"""

from google.colab import drive
drive.mount('/content/drive/')

zip_bool = False
if zip_bool:
  import zipfile
  with zipfile.ZipFile('/content/drive/MyDrive/Colab Notebooks/perception & IA/Final Project/dataset/test_sequence_2_PASS-2LBO_X-F3-B0_P848995_20210303145112_275.zip', 'r') as zip_ref:
      zip_ref.extractall()

import cv2
import numpy as np
from google.colab.patches import cv2_imshow
import glob

# Function to process and detect people
def detect_people(image_path):
    # Step 1: Load the image
    frame = cv2.imread(image_path, cv2.IMREAD_GRAYSCALE)
    img_normalized = cv2.normalize(frame, None, 0, 1.0, cv2.NORM_MINMAX, dtype=cv2.CV_32F)

    # Step 2: Mask out bright regions
    bright_threshold = 0.6  # Exclude artifacts (e.g., bright light in the middle)
    mask_bright = np.where(img_normalized < bright_threshold, 1, 0).astype(np.uint8)
    img_no_bright = cv2.bitwise_and(img_normalized, img_normalized, mask=mask_bright)

    # Step 3: Apply thresholding to isolate people
    low_thresh = 0.3
    high_thresh = 0.6
    _, people_mask = cv2.threshold(img_no_bright, low_thresh, high_thresh, cv2.THRESH_BINARY)

    # Step 4: Clean the mask with morphological operations
    kernel = cv2.getStructuringElement(cv2.MORPH_ELLIPSE, (7, 7))
    cleaned_mask = cv2.morphologyEx(people_mask, cv2.MORPH_CLOSE, kernel)
    cleaned_mask = cv2.morphologyEx(cleaned_mask, cv2.MORPH_OPEN, kernel)

    # Step 5: Detect contours
    contours, _ = cv2.findContours((cleaned_mask * 255).astype(np.uint8), cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)

    # Step 6: Filter contours by size and validate shapes
    min_area = 500  # Minimum area for valid contours
    valid_contours = []
    output = cv2.cvtColor((img_no_bright * 255).astype(np.uint8), cv2.COLOR_GRAY2BGR)

    for contour in contours:
        x, y, w, h = cv2.boundingRect(contour)
        aspect_ratio = w / h
        if min_area < cv2.contourArea(contour) and 0.5 < aspect_ratio < 2.0:  # Validate by size and shape
            valid_contours.append(contour)
            cv2.rectangle(output, (x, y), (x + w, y + h), (0, 255, 0), 2)

    # Step 7: Count people
    person_count = len(valid_contours)
    print(f"Number of people detected: {person_count}")

    # Display results
    cv2_imshow(output)

# Iterate through all images in the folder
iterate =0
for filename in glob.glob('/content/PASS-2LBO_X-F3-B0_P848995_20210303145112_275/*.png'):
    print(f"Processing: {filename}")
    detect_people(filename)
    iterate +=1
    if iterate == 30:
      break
cv2.destroyAllWindows()